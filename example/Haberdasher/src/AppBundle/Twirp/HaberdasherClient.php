<?php
# Generated by protoc-gen-twirp_php, DO NOT EDIT.
# source: haberdasher.proto

namespace AppBundle\Twirp;

use Google\Protobuf\Internal\Message;

class HaberdasherClient implements HaberdasherInterface
{
    /**
     * @var \GuzzleHttp\Client 
     */
    private $client;
    private $useJson;

    public function __construct(\GuzzleHttp\Client $client, $useJson = false)
    {
        $this->client = $client;
        $this->useJson = $useJson;
    }

    public function makeHat(Size $size): Hat
    {
        $res = $this->makeRequest('MakeHat', $this->serialize($size));
        $out = new Hat();
        $this->deserialize($out, $res->getBody()->getContents());
        return $out;
    }

    private function makeRequest($method, $in)
    {
        $res = $this->client->post(self::SERVICE_NAME . '/' . $method, [
            'body' => $in,
            'http_errors' => false,
            'headers' => [
                'Content-Type' => $this->useJson ? 'application/json' : 'application/protobuf'
            ]
        ]);
        if ($res->getStatusCode() != 200) {
            throw HaberdasherException::fromResponse($res);
        }
        return $res;
    }

    private function serialize(Message $message)
    {
        if ($this->useJson) {
            return $message->serializeToJsonString();
        }
        return $message->serializeToString();
    }

    private function deserialize(Message $message, $data)
    {
        if ($this->useJson) {
            return $message->mergeFromJsonString($data);
        }
        return $message->mergeFromString($data);
    }
}
